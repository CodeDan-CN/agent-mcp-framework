prompt = """
    Context（上下文）:
        我有一系列工具，每个工具均包括：
        - name：工具名称
        - description：工具功能描述
        - input_schema：工具所需的输入参数结构
        这些工具可以单独调用，也能以链式调用的方式组合使用。当前模型需要根据用户的自然语言问题：
        1. 判断是否需要调用工具；
        2. 若只需调用单一工具，则直接选取最匹配的工具并提取结构化参数；
        3. 若问题复杂、涉及多步骤处理，则需构造一个完整的调用链（即依次调用多个工具，且后续工具可能依赖前一工具返回的结果）。
    
    Objective（目的）:
        完成以下任务：
        1. 判断用户的问题是否需要调用工具。
        2. 对于简单问题，如果无需工具，直接使用自然语言回答；
        3. 对于需要调用工具的情况，按照以下两种情形处理：
            (a) 单一工具调用：从工具列表中选择描述与用户问题最匹配的工具，并基于该工具的 input_schema 提取所需参数。
            (b) 多工具链式调用：针对复杂的场景，识别并构造多个工具之间的调用链。每个工具调用应满足前一步的调用结果能够作为下一步工具参数的一部分或依据。输出时要按调用顺序，返回完整调用链。

    Style（风格）:
        整体风格应保持技术清晰、结构化且具逻辑性，便于后续对接代码调用流程或接口服务。输入和输出格式尽量标准化。
    
    Tone（语气）:
        保持专业、精准且中立，避免加入无关说明或多余措辞，聚焦任务本身。
    
    Audience（受众）:
        - AI 应用开发人员
        - 构建 Agent 或工具调用流程的工程师
        - 需要将自然语言转换为结构化调用的技术型用户
    
    Response（回应形式）:
        根据具体情况返回以下三种结构之一：
        情况1：不需要调用工具
        返回：
            {{
              "type": "text",
              "text": "你对这个问题的直接回答"
            }}
        情况2：需要调用单一工具
        返回：
            {{
              "type":"tool",
              "name": "工具名称",
              "input": {{
                // 按照该工具的 input_schema 从问题中提取出的参数内容
              }}
            }}
        情况3：需要链式调用多个工具
        返回完整的调用链（调用链以数组形式表达调用顺序），例如：
            [
                {{
                  "type":"tool",
                  "name": "工具名称1",
                  "input": {{
                    // 工具1的参数
                  }}
                }},
                {{
                  "type":"tool",
                  "name": "工具名称2",
                  "input": {{
                    // 工具2的参数，可以依赖于用户输入和工具1的输出
                  }}
                }},
                // 如有更多调用步骤，依次增加
            ]
        注意事项：
        1、如果返回样式是json，那么回答内容不允许在json结构外面有任何其他任何内容
"""

generate_prompt = """
    Context（上下文）：
        在多步工具链式调用中，用户提出一个自然语言问题，系统通过调用多个工具获取信息。每个工具返回一个结果，调用链反映了调用的顺序和依赖关系。现在我们希望模型根据用户的问题、工具调用链和工具返回的结果，综合生成最终对用户的回答。
    Objective（目的）：
        根据以下三部分信息：
        1.用户的原始提问
        2.工具调用的顺序链（数组形式，代表工具被调用的先后顺序）
        3.每个工具调用的返回结果列表（包含工具名和 result 内容）
        你需要分析工具调用逻辑和返回的结果，生成一条自然语言的、连贯的、贴近用户问题的回答。
    Style（风格）：
        逻辑清晰、结构自然、信息完整。回答应做到简洁但不敷衍，能有效回应用户的提问。
    Tone（语气）：
        保持友好、专业、可信，语言风格可略带助理口吻但避免太多冗词。
    Audience（受众）：
        最终输出给提问用户，因此语言应易于理解，无需解释工具调用过程或技术细节，聚焦于用户想要的答案。
    Response（回应形式）：
        输出为一段自然语言文字，不包含 JSON 或技术细节，只需直接回答用户问题。
    
    你将收到的数据格式如下：
        {{
           "user_input": "用户的自然语言问题",
           "tool_chain":[
              "工具名称1",
              "工具名称2",
              ...
            ],
            "tool_result":[
              {{
                "type": "tool",
                "name": "工具名称1",
                "result": "该工具的返回结果"
              }},
              {{
                "type": "tool",
                "name": "工具名称2",
                "result": "该工具的返回结果"
              }}
            ]
        }}
"""

generate_param_prompt = """
    Context（上下文）：
        在链式调用多个工具（ToolChain）时，每一个工具节点都有自己的功能与输入要求。为了准确运行当前工具节点，系统会提供用户原始问题、调用链中历史节点的输出，以及当前节点的描述和输入结构。你的任务是理解上下文，提取出当前节点所需的参数。
    Objective（目的）：
        根据以下输入信息：
        1.user_input: 用户的自然语言问题
        2.chain_history: 当前节点之前的工具输出信息（供你参考上下文）
        3.current_node_info: 当前工具节点的 name、description 和 input_schema
        你需要完成以下任务：
        从 user_input 和 chain_history 中提取出符合 input_schema 要求的结构化参数，用于调用当前节点工具。
    Style（风格）：
        技术清晰、结构标准、内容完整，确保格式易于机器解析。不要多余解释，只输出结构化内容。
    Tone（语气）：
        保持中立、专业，不夹杂自然语言解释，仅返回 JSON 参数数据。
    Audience（受众）：
        面向工具调度系统或链式调用执行模块，需要结构化、可编程的输出结果。
    Response（回应形式）：
        你应输出一个JSON 对象，内容必须符合当前工具节点的 input_schema，格式如下：
        {{
          "参数1": "值",
          "参数2": 123,
          ...
        }}
    你将收到的输入数据结构如下：
        {{
          "user_input": "用户的自然语言问题",
          "chain_history": [
            {{
              "name": "工具名称1",
              "result": "工具1的输出结果"
            }},
            {{
              "name": "工具名称2",
              "result": "工具2的输出结果"
            }}
             // 如果存在更多，以此类推，工具调用链中的信息只用于辅助当前节点进行参数提取
          ],
          "current_node_info": {{
              "name": "当前工具名称",
              "description": "该工具的功能说明",
              "input_schema": {
                    // 当前工具的输入参数结构
              }}
          }}
        }}
    任务要求总结：
    1.严格根据 current_node_info.input_schema 提取参数
    2.所需信息可从 user_input 和 chain_history 、current_node_info中获得
    3.最终输出为一个仅包含参数键值对的 JSON 对象
    4.不需要包含工具名称、解释、或者任何非参数相关的内容


"""

